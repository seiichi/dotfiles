" General {{{
set nocompatible                  " be iMproved

set history=256

" use clipboard instead of register
set clipboard=unnamedplus,autoselect         " use system native clipboard

" title of the terminal window
"let &titlestring="%t"."%( (%{expand(\"%:~:h\")})%)"."%( %a%r%m%)"
let &titlestring="%t"."%( (%{expand(\"%:~:h\")})%)"
let &titlestring="%t"."%( %a%r%m%)"
if !has('gui_running')
  let &t_ts = "\e]0;"
  let &t_fs = "\007"
endif
if $PYENV_VERSION != "mutt"
  set title
endif

set nobackup
set nowritebackup

set cursorline

set modeline
set modelines=5

set t_Co=256

let g:is_posix = 1                " to use modern shell
let mapleader = ','

set tags=./tags;$HOME

set fileformats=unix,dos,mac

set ttyfast
" }}}

" Formatting {{{
set formatoptions=tcroqB

set textwidth=0

set backspace=indent,eol,start

set autoindent
au FileType c set cindent
set indentkeys-=0#                " do not break indent on #
set cinkeys-=0#
set cinoptions=:s,ps,ts,cs
set cinwords=if,else,while,do
set cinwords+=for,switch,case
"}}}

" Search {{{
set incsearch                     " incremental search
set hlsearch                      " highlight search
set ignorecase
set smartcase                     " i don't like ignorecase

" make search results appear in the middle of the screen
nmap n nzz
nmap N Nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz
"}}}

" Encoding {{{
set encoding=utf-8
set termencoding=utf-8
set fileencodings=utf-8,iso-2022-jo,us_ascii,sjis,eus-jp
"set ambiwidth=double
set ambiwidth=single
"}}}

" Visual {{{
syntax on

set mouse=a
set mousehide                     " hide mouse after chars typed

" list
set list
set listchars=tab:>-
set listchars+=trail:=
"set listchars+=eol:¬
set listchars+=extends:»,precedes:«
map <silent> <leader>L :set invlist<CR>

" status line
set laststatus=2
"set statusline=%<%f\              " custom statusline
"set stl+=[%{&ff}]                 " show fileformat
"set stl+=[%{&fileencoding}]       " show fileencoding
"set stl+=%y%m%r%=
"set stl+=%-14.(%l,%c%V%)\ %P
"}}}

" Folding {{{
set foldenable
set foldmethod=marker             " fold on the marker ({{{ ... }}})
set foldlevel=100                 " disable autofold

set foldopen=block,hor,tag
set foldopen+=percent,mark
set foldopen+=quickfix
"}}}

" FileType {{{
au FileType javascript set expandtab ts=4 sw=4 sts=4
au FileType ruby set expandtab ts=2 sw=2 sts=2
au FileType eruby set expandtab ts=2 sw=2 sts=2
au FileType perl set expandtab ts=2 sw=2 sts=2
au FileType python set expandtab ts=4 sw=4 sts=4
au FileType sh set expandtab ts=2 sw=2 sts=2
au FileType css set expandtab ts=2 sw=2 sts=2
au FileType scss set expandtab ts=2 sw=2 sts=2
au FileType htmlcheetah set expandtab ts=2 sw=2 sts=2
au FileType html set expandtab ts=2 sw=2 sts=2
au FileType xhtml set expandtab ts=2 sw=2 sts=2
au FileType jinja set expandtab ts=2 sw=2 sts=2
au FileType vim set expandtab ts=2 sw=2 sts=2
au FileType markdown set expandtab ts=4 sw=4 sts=4
autocmd BufRead,BufNewFile *.md setfiletype markdown

" 80 column layout - http://vim-users.jp/2011/05/hack217/
if exists('&colorcolumn')
  au FileType sh,c,python,javascript,ruby setlocal colorcolumn=+1 tw=80
  au FileType help setlocal colorcolumn=+1 tw=78
endif
"}}}

" key mapping {{{
"set number
map <silent> <leader>n :set invnumber<CR>

" run test
nmap <silent> <leader>t :!kill -SIGUSR1 `cat /tmp/run-test.pid`<CR><CR>

" create tag file using ptags.py
nmap <leader>p :! find -X . -name \*.py -print \| xargs ptags.py
" }}}

" Vundle {{{
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#rc()

" let Vundle manage Vundle
Bundle 'gmarik/vundle'

" my bundles:
Bundle 'Lokaltog/vim-powerline'
Bundle 'altercation/vim-colors-solarized'
Bundle 'thinca/vim-quickrun'
Bundle 'scrooloose/syntastic.git'
Bundle 'freitass/todo.txt-vim'

"Bundle 'Markdown'
"Bundle 'joker1007/vim-markdown-quote-syntax'
Bundle 'tpope/vim-markdown'

"Bundle 'kannokanno/previm.git'
Bundle 'tpope/vim-fugitive'
Bundle 'Glench/Vim-Jinja2-Syntax'
Bundle 'elzr/vim-json'
Bundle 'mustache/vim-mustache-handlebars'
let g:mustache_abbreviations = 1

filetype plugin indent on

"let g:vundle_default_git_proto = 'git'
" }}}

" appearance {{{
if has('gui_macvim')
  set transparency=4
  set guifont=Ricty\ Regular\ for\ Powerline:h12
endif

colorscheme solarized
set background=dark

if hostname() != "tb303" && hostname() != "hilite" && hostname() != "babylon"
  let g:Powerline_symbols = 'fancy'
endif
" }}}

" vim-quickrun {{{
silent! map <unique> <Leader>q <Plug>(quickrun)
let g:quickrun_config = {}
let g:quickrun_config.markdown = {
\ 'command': 'markdown.js',
\ 'exec': '%c < %s | html2text -nobs -style pretty -utf8'
\}
" }}}

" syntastic {{{
let g:syntastic_javascript_jshint_conf="~/.jshintrc"
" }}}

" todo.txt-vim {{{
highlight default link TodoDone      Comment
highlight default link TodoPriorityA Type
highlight default link TodoPriorityB Statement
highlight default link TodoPriorityC Identifier
highlight default link TodoPriorityZ Comment
highlight default link TodoDate      PreProc
highlight default link TodoProject   Special
highlight default link TodoContext   String
" }}}
